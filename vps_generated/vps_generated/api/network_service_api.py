"""

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 0.0.1
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from vps_generated.api_client import ApiClient, Endpoint as _Endpoint
from vps_generated.model_utils import (  # noqa: F401
    check_allowed_values,
    check_validations,
    date,
    datetime,
    file_type,
    none_type,
    validate_and_convert_types
)
from vps_generated.model.network_create_private_network_response import NetworkCreatePrivateNetworkResponse
from vps_generated.model.network_get_network_info_response import NetworkGetNetworkInfoResponse
from vps_generated.model.network_order_ip_address_request import NetworkOrderIpAddressRequest
from vps_generated.model.network_order_ip_address_response import NetworkOrderIpAddressResponse
from vps_generated.model.network_remove_ip_address_response import NetworkRemoveIpAddressResponse
from vps_generated.model.network_suggest_private_address_request import NetworkSuggestPrivateAddressRequest
from vps_generated.model.network_suggest_private_address_response import NetworkSuggestPrivateAddressResponse


class NetworkServiceApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client
        self.network_service_create_private_network_endpoint = _Endpoint(
            settings={
                'response_type': (NetworkCreatePrivateNetworkResponse,),
                'auth': [
                    'bearerAuth'
                ],
                'endpoint_path': '/v1/vps/private-network',
                'operation_id': 'network_service_create_private_network',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                },
                'attribute_map': {
                },
                'location_map': {
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.network_service_get_network_info_endpoint = _Endpoint(
            settings={
                'response_type': (NetworkGetNetworkInfoResponse,),
                'auth': [
                    'bearerAuth'
                ],
                'endpoint_path': '/v1/vps/network',
                'operation_id': 'network_service_get_network_info',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                },
                'attribute_map': {
                },
                'location_map': {
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.network_service_order_ip_address_endpoint = _Endpoint(
            settings={
                'response_type': (NetworkOrderIpAddressResponse,),
                'auth': [
                    'bearerAuth'
                ],
                'endpoint_path': '/v1/vps/network',
                'operation_id': 'network_service_order_ip_address',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'network_order_ip_address_request',
                ],
                'required': [
                    'network_order_ip_address_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'network_order_ip_address_request':
                        (NetworkOrderIpAddressRequest,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'network_order_ip_address_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.network_service_remove_ip_address_endpoint = _Endpoint(
            settings={
                'response_type': (NetworkRemoveIpAddressResponse,),
                'auth': [
                    'bearerAuth'
                ],
                'endpoint_path': '/v1/vps/network/{ip_address}',
                'operation_id': 'network_service_remove_ip_address',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'ip_address',
                ],
                'required': [
                    'ip_address',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'ip_address':
                        (str,),
                },
                'attribute_map': {
                    'ip_address': 'ip_address',
                },
                'location_map': {
                    'ip_address': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.network_service_suggest_private_address_endpoint = _Endpoint(
            settings={
                'response_type': (NetworkSuggestPrivateAddressResponse,),
                'auth': [
                    'bearerAuth'
                ],
                'endpoint_path': '/v1/vps/private-network/{network_id}/suggested-address',
                'operation_id': 'network_service_suggest_private_address',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'network_id',
                    'network_suggest_private_address_request',
                ],
                'required': [
                    'network_id',
                    'network_suggest_private_address_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'network_id':
                        (str,),
                    'network_suggest_private_address_request':
                        (NetworkSuggestPrivateAddressRequest,),
                },
                'attribute_map': {
                    'network_id': 'network_id',
                },
                'location_map': {
                    'network_id': 'path',
                    'network_suggest_private_address_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )

    def network_service_create_private_network(
        self,
        **kwargs
    ):
        """network_service_create_private_network  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.network_service_create_private_network(async_req=True)
        >>> result = thread.get()


        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            NetworkCreatePrivateNetworkResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_host_index'] = kwargs.get('_host_index')
        return self.network_service_create_private_network_endpoint.call_with_http_info(**kwargs)

    def network_service_get_network_info(
        self,
        **kwargs
    ):
        """network_service_get_network_info  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.network_service_get_network_info(async_req=True)
        >>> result = thread.get()


        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            NetworkGetNetworkInfoResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_host_index'] = kwargs.get('_host_index')
        return self.network_service_get_network_info_endpoint.call_with_http_info(**kwargs)

    def network_service_order_ip_address(
        self,
        network_order_ip_address_request,
        **kwargs
    ):
        """network_service_order_ip_address  # noqa: E501

        Заказ дополнительных IP-адресов для пользователя  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.network_service_order_ip_address(network_order_ip_address_request, async_req=True)
        >>> result = thread.get()

        Args:
            network_order_ip_address_request (NetworkOrderIpAddressRequest):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            NetworkOrderIpAddressResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['network_order_ip_address_request'] = \
            network_order_ip_address_request
        return self.network_service_order_ip_address_endpoint.call_with_http_info(**kwargs)

    def network_service_remove_ip_address(
        self,
        ip_address,
        **kwargs
    ):
        """network_service_remove_ip_address  # noqa: E501

        Отмена заказа дополнительного IP адреса пользователя  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.network_service_remove_ip_address(ip_address, async_req=True)
        >>> result = thread.get()

        Args:
            ip_address (str):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            NetworkRemoveIpAddressResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['ip_address'] = \
            ip_address
        return self.network_service_remove_ip_address_endpoint.call_with_http_info(**kwargs)

    def network_service_suggest_private_address(
        self,
        network_id,
        network_suggest_private_address_request,
        **kwargs
    ):
        """network_service_suggest_private_address  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.network_service_suggest_private_address(network_id, network_suggest_private_address_request, async_req=True)
        >>> result = thread.get()

        Args:
            network_id (str):
            network_suggest_private_address_request (NetworkSuggestPrivateAddressRequest):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            NetworkSuggestPrivateAddressResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['network_id'] = \
            network_id
        kwargs['network_suggest_private_address_request'] = \
            network_suggest_private_address_request
        return self.network_service_suggest_private_address_endpoint.call_with_http_info(**kwargs)

