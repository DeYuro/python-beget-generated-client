"""

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 0.0.1
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from vps_generated.api_client import ApiClient, Endpoint as _Endpoint
from vps_generated.model_utils import (  # noqa: F401
    check_allowed_values,
    check_validations,
    date,
    datetime,
    file_type,
    none_type,
    validate_and_convert_types
)
from vps_generated.model.backup_get_available_copies_response import BackupGetAvailableCopiesResponse
from vps_generated.model.backup_get_backup_file_list_response import BackupGetBackupFileListResponse
from vps_generated.model.backup_get_orders_response import BackupGetOrdersResponse
from vps_generated.model.backup_restore_file_request import BackupRestoreFileRequest
from vps_generated.model.backup_restore_file_response import BackupRestoreFileResponse
from vps_generated.model.backup_restore_server_request import BackupRestoreServerRequest
from vps_generated.model.backup_restore_server_response import BackupRestoreServerResponse


class BackupServiceApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client
        self.backup_service_get_available_copies_endpoint = _Endpoint(
            settings={
                'response_type': (BackupGetAvailableCopiesResponse,),
                'auth': [
                    'bearerAuth'
                ],
                'endpoint_path': '/v1/vps/backup',
                'operation_id': 'backup_service_get_available_copies',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                },
                'attribute_map': {
                },
                'location_map': {
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.backup_service_get_backup_file_list_endpoint = _Endpoint(
            settings={
                'response_type': (BackupGetBackupFileListResponse,),
                'auth': [
                    'bearerAuth'
                ],
                'endpoint_path': '/v1/vps/{id}/backup/{copy_id}',
                'operation_id': 'backup_service_get_backup_file_list',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'id',
                    'copy_id',
                    'path',
                ],
                'required': [
                    'id',
                    'copy_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'id':
                        (str,),
                    'copy_id':
                        (str,),
                    'path':
                        (str,),
                },
                'attribute_map': {
                    'id': 'id',
                    'copy_id': 'copy_id',
                    'path': 'path',
                },
                'location_map': {
                    'id': 'path',
                    'copy_id': 'path',
                    'path': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.backup_service_get_orders_endpoint = _Endpoint(
            settings={
                'response_type': (BackupGetOrdersResponse,),
                'auth': [
                    'bearerAuth'
                ],
                'endpoint_path': '/v1/vps/backup/orders',
                'operation_id': 'backup_service_get_orders',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'limit',
                    'offset',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'limit':
                        (str,),
                    'offset':
                        (str,),
                },
                'attribute_map': {
                    'limit': 'limit',
                    'offset': 'offset',
                },
                'location_map': {
                    'limit': 'query',
                    'offset': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.backup_service_restore_file_endpoint = _Endpoint(
            settings={
                'response_type': (BackupRestoreFileResponse,),
                'auth': [
                    'bearerAuth'
                ],
                'endpoint_path': '/v1/vps/{id}/backup/{copy_id}/file',
                'operation_id': 'backup_service_restore_file',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'id',
                    'copy_id',
                    'backup_restore_file_request',
                ],
                'required': [
                    'id',
                    'copy_id',
                    'backup_restore_file_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'id':
                        (str,),
                    'copy_id':
                        (str,),
                    'backup_restore_file_request':
                        (BackupRestoreFileRequest,),
                },
                'attribute_map': {
                    'id': 'id',
                    'copy_id': 'copy_id',
                },
                'location_map': {
                    'id': 'path',
                    'copy_id': 'path',
                    'backup_restore_file_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.backup_service_restore_server_endpoint = _Endpoint(
            settings={
                'response_type': (BackupRestoreServerResponse,),
                'auth': [
                    'bearerAuth'
                ],
                'endpoint_path': '/v1/vps/{id}/backup/{copy_id}/server',
                'operation_id': 'backup_service_restore_server',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'id',
                    'copy_id',
                    'backup_restore_server_request',
                ],
                'required': [
                    'id',
                    'copy_id',
                    'backup_restore_server_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'id':
                        (str,),
                    'copy_id':
                        (str,),
                    'backup_restore_server_request':
                        (BackupRestoreServerRequest,),
                },
                'attribute_map': {
                    'id': 'id',
                    'copy_id': 'copy_id',
                },
                'location_map': {
                    'id': 'path',
                    'copy_id': 'path',
                    'backup_restore_server_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )

    def backup_service_get_available_copies(
        self,
        **kwargs
    ):
        """backup_service_get_available_copies  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.backup_service_get_available_copies(async_req=True)
        >>> result = thread.get()


        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            BackupGetAvailableCopiesResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_host_index'] = kwargs.get('_host_index')
        return self.backup_service_get_available_copies_endpoint.call_with_http_info(**kwargs)

    def backup_service_get_backup_file_list(
        self,
        id,
        copy_id,
        **kwargs
    ):
        """backup_service_get_backup_file_list  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.backup_service_get_backup_file_list(id, copy_id, async_req=True)
        >>> result = thread.get()

        Args:
            id (str):
            copy_id (str):

        Keyword Args:
            path (str): Путь для отображения. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            BackupGetBackupFileListResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['id'] = \
            id
        kwargs['copy_id'] = \
            copy_id
        return self.backup_service_get_backup_file_list_endpoint.call_with_http_info(**kwargs)

    def backup_service_get_orders(
        self,
        **kwargs
    ):
        """backup_service_get_orders  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.backup_service_get_orders(async_req=True)
        >>> result = thread.get()


        Keyword Args:
            limit (str): Количество записей на страницу (от 1 до 100). [optional]
            offset (str): Смещение относительно нулевой (последней) записи. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            BackupGetOrdersResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_host_index'] = kwargs.get('_host_index')
        return self.backup_service_get_orders_endpoint.call_with_http_info(**kwargs)

    def backup_service_restore_file(
        self,
        id,
        copy_id,
        backup_restore_file_request,
        **kwargs
    ):
        """backup_service_restore_file  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.backup_service_restore_file(id, copy_id, backup_restore_file_request, async_req=True)
        >>> result = thread.get()

        Args:
            id (str):
            copy_id (str):
            backup_restore_file_request (BackupRestoreFileRequest):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            BackupRestoreFileResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['id'] = \
            id
        kwargs['copy_id'] = \
            copy_id
        kwargs['backup_restore_file_request'] = \
            backup_restore_file_request
        return self.backup_service_restore_file_endpoint.call_with_http_info(**kwargs)

    def backup_service_restore_server(
        self,
        id,
        copy_id,
        backup_restore_server_request,
        **kwargs
    ):
        """backup_service_restore_server  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.backup_service_restore_server(id, copy_id, backup_restore_server_request, async_req=True)
        >>> result = thread.get()

        Args:
            id (str):
            copy_id (str):
            backup_restore_server_request (BackupRestoreServerRequest):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            BackupRestoreServerResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['id'] = \
            id
        kwargs['copy_id'] = \
            copy_id
        kwargs['backup_restore_server_request'] = \
            backup_restore_server_request
        return self.backup_service_restore_server_endpoint.call_with_http_info(**kwargs)

